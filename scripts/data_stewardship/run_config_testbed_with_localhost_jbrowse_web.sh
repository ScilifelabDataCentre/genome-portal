#! /bin/bash

### Description ###
# This script contains a workflow for testing datasets and config.yml files for a species before added to the Swedish Reference Genome Portal.
# It runs the makefile to download and prepare the data and generate a JBrowse2 config file. These files are then copied to a temp folder
# where the JBrowse web interface is installed. As per  per reccomendations in the JBrowse CLI documentation (https://jbrowse.org/jb2/docs/quickstart_web/)
# npx serve can then be used to initate a localhost instance of JBrowse2. Note that the Genome Portal uses Hugo server for serving the JBrowse2 instance
# as well as the related web pages, but here npx serve is for simplicity as it only serves the JBrowse2 instance.
#
# The workflow is intended for assisting in the data validation process, and not as an alternative to the rest of the code base in the repository.
# Once a species config.yml file has been validated and is scheduled for commiting to the repository, the full workflow 'make build install' and 'hugo serve'
# needs to be run to ensure that the data is correctly integrated with the rest of the Genome Portal.
#

### Dependencies ###
# yq - used for parsing the config.yml file; https://mikefarah.gitbook.io/yq;
# samtools - used for indexing the genome assembly fasta file (samtools faidx), indexing various annotation track files (tabix) and for bgzip compression (bgzip)
# jbrowse CLI - used for generating .jbrowse config files that can be loaded by your JBrowse 2; https://jbrowse.org/jb2/docs/cli/
# jbrowse web - used for serving the JBrowse2 web interface; https://jbrowse.org/jb2/docs/quickstart_web/
# serve - creates a local host server with JBrowse2 web; https://www.npmjs.com/package/serve
# get_aliases_from_ENA_fasta.py - a python script that generates an alias file for the assembly, already packaged with the genome-portal repo
# jq - used for adding the generated alias file to the config.json file; https://jqlang.github.io/jq/
#

### Installation instructions before first use ###
# A convient way to load the config.json generate by the script into JBrowse is to use the localhost web browser version
# that can be installed with the Jbrowse CLI tools. Installation can be done with the following command:
#
# Install the all the dependencies listed above. Many of the can be installed using package managers.
# Then use the JBrowse CLI to install the JBrowse web interface as follows:
#
# (assuming current working directory is the root of the Swedish Reference Genome Portal Git repository, henceforth referred to as genome-portal/)
# jbrowse create scripts/data_stewardship/temp/jbrowse_web
#
# NOTE! It is possible to install the JBrowse web interface somewhere else and run the script with the -j flag to
# pointing at the path to the JBrowse web directory.
#

### General usage ###
# Usage: run_config_testbed_with_localhost_jbrowse_web.sh [-c config_file] [-j jbrowse_web_dir] [-p python_script_path]
# Options:
#   -c, --config            Specify the config file (mandatory)
#   -h, --help              Display this help message
#   -j, --jbrowse_web_dir   Specify the JBrowse web directory
#                           (Default: .../$repo_name/scripts/data_stewardship/temp/jbrowse_web)
#   -p, --python_script     Specify the path to the script 'get_aliases_from_ENA_fasta.py'
#                           (Default: .../$repo_name/scripts/data_stewardship/get_aliases_from_ENA_fasta.py)
#   -s, --shell             Specify the shell to use when running the makefile.
#                           (The script will use the default shell variable of the makefile if this flag is not used.)
#
# Example usages:
#   (assuming current working directory is genome-portal/scripts/data_stewardship)
#
#   bash run_config_testbed_with_localhost_jbrowse_web.sh -c ../../config/parnassius_mnemosyne/config.yml
#   bash run_config_testbed_with_localhost_jbrowse_web.sh -c ../../config/parnassius_mnemosyne/config.yml -s "/opt/homebrew/bin/bash"
#
# NOTE! the script (and the makefile) expects the config.yml to located in genome-portal/config/ORGANISM_NAME.
#

### Advanced usage
# It is possible to use local files in the config.yml for testing purposes since the curl command used by the makefile can download local files.
# To run the config with local files, specify the url to the data file with "file:///path/to/file" instead of "https://"
# NOTE! All config.ymls that are committed to the repo need to have public urls for the data files.
#       Don't forget to change back to the public url before committing any config.yml files!

### Outputs
# - The files generated by the genome-portal makefile from a species config.yml
# - An alias file for the assembly (if none were specified in config.yml AND if the assembly was downloaded from ENA)
#

### This script has been developed and tested with ###
# CPU: Apple M3 Pro
#
# GNU bash, version 5.2.26(1)-release (aarch64-apple-darwin23.2.0); installed via Homebrew
# yq 4.43.1
# @jbrowse/cli/2.11.0 darwin-arm64 node-v22.1.0
# @jbrowse/cli/2.11.1
# serve 14.2.3
# samtools 1.19.2
# jq v1.7.1
#

### TODO-list / wishlist for future features
# Output diagnostic logs with warnings and errors
# Accept repeatMasker.out files in config.yml and convert them to BED format
# Accept GTF files in config.yml and convert them to GFF format
# Create a defaultSession based on a minimal template
#

######


main() {
    init_variables_and_parse_arguments "$@"

    read_yaml_config_and_populate_array

    call_makefile_for_the_species_in_the_config_and_copy_files_to_temp

    closing_messages
}

init_variables_and_parse_arguments(){
    # Fetch git dir and repo name
    base_dir="$(git rev-parse --show-toplevel)"
    repo_name="$(basename "$(git rev-parse --show-toplevel)")"

    # Set default values to the argument variables
    config_file=""
    jbrowse_web_dir="$base_dir/scripts/data_stewardship/temp/jbrowse_web"
    python_script_path="$base_dir/scripts/data_stewardship/get_aliases_from_ENA_fasta.py"
    shell_for_makefile=""

    help_message="Usage: $0 [-c config_file] [-j jbrowse_web_dir] [-p python_script_path]
    Options:
        -c, --config            Specify the config file (mandatory)
        -h, --help              Display this help message
        -j, --jbrowse_web_dir   Specify the JBrowse web directory
                                (Default: .../$repo_name/scripts/data_stewardship/temp/jbrowse_web)
        -p, --python_script     Specify the path to the script 'get_aliases_from_ENA_fasta.py'
                                (Default: .../$repo_name/scripts/data_stewardship/get_aliases_from_ENA_fasta.py)
        -s, --shell             Specify the shell to use when running the makefile.
                                (The script will use the default shell variable of the makefile if this flag is not used.)

    Example:
    bash $0 -c .../$repo_name/data/parnassius_mnemosyne/config.yml
    "

    # If no arguments were provided, display the help message and exit
    if [[ $# -eq 0 ]]; then
        echo "$help_message"
        exit 0
    fi

    # Transform the long flags to short ones
    # (this code block is based on mcoolive's answer in this forum thread:
    # https://stackoverflow.com/questions/12022592/how-can-i-use-long-options-with-the-bash-getopts-builtin
    # )
    for arg in "$@"; do
    shift
    case "$arg" in
        '--help')   set -- "$@" '-h'   ;;
        '--config') set -- "$@" '-c'   ;;
        '--python_script')     set -- "$@" '-p'   ;;
        '--jbrowse_web_dir')     set -- "$@" '-j'   ;;
        '--shell')     set -- "$@" '-s'   ;;
        *)          set -- "$@" "$arg" ;;
    esac
    done

    # Fetch the values from the arguments
    while getopts c:j:p:s:h flag
    do
        case "${flag}" in
            c) config_file=${OPTARG};;
            p) python_script_path=${OPTARG};;
            j) jbrowse_web_dir=${OPTARG};;
            s) shell_for_makefile=${OPTARG};;
            h)
                echo "$help_message"
                exit 0
                ;;
            *)
                echo "Error: Invalid flag"
                exit 1
                ;;
        esac
    done

    # Check if the -c flag was provided
    if [[ -z "$config_file" ]]; then
        echo "Error: The --config/-c flag is mandatory"
        exit 1
    fi
}

read_yaml_config_and_populate_array()
{
    printf "\n- Reading the config...\n"

    organism_name=$(yq '.organism' $config_file) || { exit 1; }
    # The lower case option does not work with the sed that comes with MacOS (BSD utils?), so pipe to awk instead
    organism_name_formatted=$(echo "$organism_name" | sed -e 's/^"//' -e 's/"$//' -e 's/ /_/g' | awk '{print tolower($0)}')

    # Extract the URL of the assembly. Right now this script only supports one assembly per config file.
    assembly_url=$(yq '.assembly.url' $config_file) || { exit 1; }
    assembly_allias=$(yq '.assembly.aliases' $config_file) || { exit 1; }

    if $(yq ".assembly | has(\"fileName\")" $config_file); then
        assembly_filename=$(yq ".assembly.fileName" $config_file)
    else
        assembly_filename=${assembly_url##*/}
    fi
    array_with_filenames+=("$assembly_filename")

    if $(yq ".assembly | has(\"aliases\")" $config_file); then
        assembly_allias_url=$(yq '.assembly.aliases' $config_file)
        assembly_alias_filename=${assembly_allias_url##*/}
    else
        assembly_alias_filename=""
    fi

    # Loop over each track and populate an array with the filenames
    num_tracks=$(yq '.tracks | length' $config_file)
    for ((i=0; i<$num_tracks; i++))
    do
        track_url=$(yq ".tracks[$i].url" $config_file)
        # NB! string escape needed for "filename" since "" are required to call $i
        if $(yq ".tracks[$i] | has(\"fileName\")" $config_file); then
            track_filename=$(yq ".tracks[$i].fileName" $config_file)
        else
            track_filename=${track_url##*/}
        fi
        array_with_filenames+=("$track_filename")
    done
}

call_makefile_for_the_species_in_the_config_and_copy_files_to_temp(){
    # For the makefile to work, the config needs to be in data/$organism_name_formatted/config.yml.
    expected_config_path="$base_dir/config/$organism_name_formatted/config.yml"
    input_config_path=$(realpath "$config_file")

    if [ -f "$expected_config_path" ] && cmp -s "$input_config_path" "$expected_config_path"; then
        echo "The config.yml given to the script describes $organism_name and that it resides in the data/$organism_name_formatted directory."
        echo "Good, then all is set to call the makefile."
        echo -e "\n- Calling makefile for $organism_name..."
        cd "$base_dir"
        if [ -n "$shell_for_makefile" ]; then
            shell_for_makefile="SHELL=/${shell_for_makefile}"
        fi
        make build DATADIRS=data/$organism_name_formatted $shell_for_makefile && cp "$base_dir/data/$organism_name_formatted/config.json" "$jbrowse_web_dir" || { exit 1; }
        echo -e "\nThe makefile run has completed. Copying the following $organism_name files to \n$jbrowse_web_dir:\n"
        echo -e "config.json"

        # Use the file list from the config.yml and alter fasta extensions to match the makefile output (.fna).
        # Then copy to $jbrowse_web_dir
        # NOTE! This currently only works for files that are bgzipped by the makefile
        for i in "${!array_with_filenames[@]}"; do
            file_base_name=$(basename "${array_with_filenames[$i]}" .gz)
            if [[ "$file_base_name" == *"fasta"* ]] || [[ "$file_base_name" == *"fna"* ]] || [[ "$file_base_name" == *"fa"* ]]; then
                file_base_name=$(echo "$file_base_name" | sed -e 's/\.fasta/.fna/g' -e 's/\.fa/.fna/g')
                assembly_makefile_filename="$file_base_name.bgz"
            fi
            array_with_filenames[$i]="$file_base_name.bgz"
            cp "$base_dir/data/$organism_name_formatted/${array_with_filenames[$i]}"* "$jbrowse_web_dir" || { exit 1; }
            echo "${array_with_filenames[$i]}"
        done

        # Check for alias file and create if not already set in the config.json
        echo -e "\nChecking if there was an assembly alias file set in the config.yml..."
        if [ -n "$assembly_alias_filename" ]; then
            echo "Yes, a remote alias file was already specified in the config.yml. This means that the makefile has already specified it in config.json."
        else
            echo "No. Creating an alias file for the assembly."
            create_alias_file "$jbrowse_web_dir" "$assembly_makefile_filename"
        fi

    else
        echo "ERROR. When running $0 is with the makefile option, $config_file"
        echo "need to reside in the config/$organism_name_formatted directory, be named config.yml, and be the same as the input config.yml."
        exit 1
    fi
}

create_alias_file(){
    path_to_fasta_file_dir=$1
    fasta_file_to_make_alias_from=$2
    # The python script currently only works with ENA URLs, hence the case statement
    case $assembly_url in
            *"ebi.ac.uk"*)
                echo "ENA-downloaded assembly detected. Creating an alias file for the assembly."
                assembly_alias="${fasta_file_to_make_alias_from%.bgz}.alias"
                python "$python_script_path" --fasta "$path_to_fasta_file_dir/$fasta_file_to_make_alias_from" --out "$jbrowse_web_dir/$assembly_alias" || { exit 1; }
                jq --arg assemblyAlias "$assembly_alias" '.assemblies[0] += {"refNameAliases": {"adapter": {"type": "RefNameAliasAdapter", "location": {"uri": $assemblyAlias, "locationType": "UriLocation"}}}}' "$jbrowse_web_dir/config.json" > "$jbrowse_web_dir/temp.json" && mv "$jbrowse_web_dir/temp.json" "$jbrowse_web_dir/config.json"
                echo "Added alias file to $jbrowse_web_dir/config.json"
                echo "Note! The line was NOT added to the main config.json file in data/$organism_name_formatted/"
                ;;
            *)
                echo "Since the assembly was not downloaded from ENA, no alias file was created for the assembly."
                echo "There is thus a risk that the data tracks will not display properly in JBrowse."
    esac
}

closing_messages(){
    echo -e "\n- Configuration complete."
    echo -e "\nTo view the JBrowse2 instance, change directory to $jbrowse_web_dir"
    echo -e "and run the following command:"
    echo -e "\n>npx serve .\n"
    echo -e "Then follow the instructions that appear in the terminal."
}

set -e
main "$@"; exit