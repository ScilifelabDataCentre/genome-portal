#!/bin/bash

help() {
  echo "\
Build the Genome Portal Docker images

Usage: dockerbuild [-k data|hugo ] [-t TAG] [-i IMAGE] [-u]

Options:
  -k KIND       Kind of image to build, 'data' (the default) or 'hugo'.
  -t TAG        Docker tag
  -i IMAGE      Docker image name. Defaults: ghcr.io/scilifelabdatacentre/{swg-data-builder,swg-hugo-site}
  -u            Use default user and group IDs in the data builder image (see below)
  -d            Dry run, prints the arguments passed to the Docker run command

Data builder (docker/data.dockerfile):

By default, user ID and group ID used in the image are made to match
those of the host, so that files created in mounted directories get
convenient permissions. To disable this behavior and use the
dockerfile defaults, use the -u flag or set the SWG_DEFAULT_USER
environment variable to 1.

Hugo (docker/hugo.dockerfile):

The HUGO_GIT_REF_NAME and HUGO_GIT_SHA environment variables can be
set to control the version information shown on the footer of each
page They both default to the checked out branch name and commit hash
respectively.
"
}

main () {
  local kind tag image use_host_uid dry_run
  declare -a build_args

  kind=data
  tag=local
  use_host_uid=1
  dry_run=0

  while getopts k:t:udh opt; do
    case "${opt}" in
      h) help && exit 0 ;;
      \?) help && exit 1 ;;
      k) kind="${OPTARG}" ;;
      t) tag="${OPTARG}" ;;
      u) use_host_uid=0 ;;
      d) dry_run=1 ;;
    esac
  done

  if [[ "${kind}" == data ]]; then
    image=ghcr.io/scilifelabdatacentre/swg-data-builder
    dockerfile=docker/data.dockerfile
    if ((use_host_uid)); then
      build_args=(
        "--build-arg" "SWG_UID=$(id -u)"
        "--build-arg" "SWG_GID=$(id -g)"
      )
    fi
  elif [[ "${kind}" == hugo ]]; then
    image=ghcr.io/scilifelabdatacentre/swg-hugo-site
    dockerfile=docker/hugo.dockerfile
    build_args=(
      "--build-arg" "HUGO_GIT_REF_NAME=${HUGO_GIT_REF_NAME:-$(git branch --show-current)}"
      "--build-arg" "HUGO_GIT_SHA=${HUGO_GIT_SHA:-$(git rev-parse HEAD)}"
    )
  else
    >&2 echo "Argument to option -k must be either 'data' or 'hugo'"
    >&2 help
    exit 1
  fi

  if ! ((dry_run)); then
    docker_build
  else
    echo "Build arguments: ${build_args[*]}"
    echo "Image:           ${image}:${tag}"
    echo "Dockerfile:      ${dockerfile}"
  fi
}

docker_build () {
  docker build "${build_args[@]}" \
         -t "${image}:${tag}" \
         -f "${dockerfile}" .
}

main "$@"

