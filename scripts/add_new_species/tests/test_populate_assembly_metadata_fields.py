from datetime import datetime
from pathlib import Path
from unittest.mock import patch

import yaml
from add_config_yml import populate_config_yml
from add_content_files import add_assembly_md, add_index_md
from form_parser import UserFormData
from get_assembly_metadata_from_ENA_NCBI import AssemblyMetadata


def test_populate_config_yml_with_assembly_metadata(
    assembly_metadata: AssemblyMetadata, data_tracks_list_of_dicts: list[dict], tmp_path: Path
):
    """
    Test that writes the config.yml file based on assembly metadata and data tracks.
    In the package, assembly_metadata is generated by get_assembly_metadata_from_ENA_NCBI()
    and data_tracks_list_of_dicts by process_data_tracks_Excel().
    """

    populate_config_yml(assembly_metadata, data_tracks_list_of_dicts, tmp_path)

    temp_config_path = tmp_path / "config.yml"
    with open(temp_config_path, "r") as f:
        updated_config = yaml.safe_load(f)

    assert updated_config["organism"] == "Aspergillus nidulans"
    assert updated_config["assembly"]["name"] == "ASM1142v1"
    assert updated_config["assembly"]["displayName"] == "A. nidulans genome assembly GCA_000011425.1"
    assert updated_config["assembly"]["accession"] == "GCA_000011425.1"
    assert updated_config["assembly"]["url"] == "https://example.com/genome.fasta"
    assert updated_config["assembly"]["fileName"] == "genome.fasta"
    assert len(updated_config["tracks"]) == len(data_tracks_list_of_dicts) - 1
    assert updated_config["tracks"][0]["name"] == "Protein-coding genes"
    assert updated_config["tracks"][0]["url"] == "https://example.com/track1.gff"
    assert updated_config["tracks"][0]["fileName"] == "track1.gff"
    assert updated_config["tracks"][1]["name"] == "Repeats"
    assert updated_config["tracks"][1]["url"] == "https://example.com/track2.gff"
    assert updated_config["tracks"][1]["fileName"] == "track2.gff"


@patch("add_content_files.get_gbif_taxon_key", return_value="123456")
@patch("add_content_files.process_taxonomy", return_value="78910")
def test_add_index_md(mock_process_taxonomy, mock_get_gbif_taxon_key, user_form_data, tmp_path):
    """
    Test that the add_index_md function correctly processes the template _index.md file
    and replaces placeholders with species-specific information.
    """

    add_index_md(
        user_form_data=user_form_data,
        content_dir_path=tmp_path,
        data_dir_path=tmp_path,
    )

    output_file_path = tmp_path / "_index.md"
    assert output_file_path.exists()

    updated_index_md = output_file_path.read_text()

    placeholders_and_replacements = {
        "${species_name}": user_form_data.species_name,
        "${species_slug}": user_form_data.species_slug,
        "${common_name}": user_form_data.common_name,
        "${description}": user_form_data.description,
        "${references}": user_form_data.references,
        "${publication}": user_form_data.publication,
        "${img_attrib_text}": user_form_data.img_attrib_text,
        "${img_attrib_link}": user_form_data.img_attrib_link,
        "${todays_date}": datetime.now().strftime("%d/%m/%Y"),
        "${gbif_taxon_id}": "123456",
        "${goat_webpage}": "78910",
    }

    for placeholder, expected_value in placeholders_and_replacements.items():
        assert placeholder not in updated_index_md, f"Placeholder {placeholder} was not replaced."
        assert expected_value in updated_index_md, f"Expected value {expected_value} not found in the output."

    mock_get_gbif_taxon_key.assert_called_once_with(species_name=user_form_data.species_name)
    mock_process_taxonomy.assert_called_once_with(user_form_data.species_name, tmp_path)


def test_add_assembly_md(user_form_data: UserFormData, assembly_metadata: AssemblyMetadata, tmp_path):
    """
    Test that the add_assembly_md function correctly processes the template assembly.md file
    and replaces placeholders with species-specific information.
    Note: the placeholder replacement assertion checks for the full ${} pattern since the words
    'funding' and 'publication' are not unique in the template file.
    """

    add_assembly_md(
        user_form_data=user_form_data,
        assembly_metadata=assembly_metadata,
        content_dir_path=tmp_path,
    )

    output_file_path = tmp_path / "assembly.md"
    assert output_file_path.exists()

    updated_assembly_md = output_file_path.read_text()

    placeholders_and_replacements = {
        "${species_name}": user_form_data.species_name,
        "${species_slug}": user_form_data.species_slug,
        "${funding}": user_form_data.funding,
        "${publication}": user_form_data.publication,
        "${assembly_name}": assembly_metadata.assembly_name,
        "${assembly_type}": assembly_metadata.assembly_type,
        "${assembly_level}": assembly_metadata.assembly_level,
        "${genome_representation}": assembly_metadata.genome_representation,
        "${assembly_accession}": assembly_metadata.assembly_accession,
    }

    for placeholder, expected_value in placeholders_and_replacements.items():
        assert placeholder not in updated_assembly_md, f"Placeholder {placeholder} was not replaced."
        assert expected_value in updated_assembly_md, f"Expected value {expected_value} not found in the output."
