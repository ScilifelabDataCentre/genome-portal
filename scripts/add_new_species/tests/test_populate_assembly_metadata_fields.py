from pathlib import Path
from unittest.mock import patch

import yaml
from add_new_species.add_config_yml import populate_config_yml
from add_new_species.add_content_files import add_assembly_md, add_index_md
from add_new_species.form_parser import UserFormData
from add_new_species.get_assembly_metadata_from_ENA_NCBI import AssemblyMetadata


def test_populate_config_yml_with_assembly_metadata(
    assembly_metadata: AssemblyMetadata, data_tracks_list_of_dicts: list[dict], temp_output_dir: Path
):
    """
    Test that writes the config.yml file based on assembly metadata and data tracks.
    In the package, assembly_metadata is generated by get_assembly_metadata_from_ENA_NCBI()
    and data_tracks_list_of_dicts by process_data_tracks_Excel().
    """

    populate_config_yml(assembly_metadata, data_tracks_list_of_dicts, temp_output_dir)

    temp_config_path = temp_output_dir / "config.yml"
    with open(temp_config_path, "r") as f:
        updated_config = yaml.safe_load(f)

    assert updated_config["organism"] == "Aspergillus nidulans"
    assert updated_config["assembly"]["name"] == "ASM1142v1"
    assert updated_config["assembly"]["displayName"] == "A. nidulans genome assembly GCA_000011425.1"
    assert updated_config["assembly"]["accession"] == "GCA_000011425.1"
    assert updated_config["assembly"]["url"] == "https://example.com/genome.fasta"
    assert updated_config["assembly"]["fileName"] == "genome.fasta"
    assert len(updated_config["tracks"]) == len(data_tracks_list_of_dicts) - 1
    assert updated_config["tracks"][0]["name"] == "Protein-coding genes"
    assert updated_config["tracks"][0]["url"] == "https://example.com/track1.gff"
    assert updated_config["tracks"][0]["fileName"] == "track1.gff"
    assert updated_config["tracks"][1]["name"] == "Repeats"
    assert updated_config["tracks"][1]["url"] == "https://example.com/track2.gff"
    assert updated_config["tracks"][1]["fileName"] == "track2.gff"


@patch("add_new_species.add_content_files.get_gbif_taxon_key", return_value="123456")
@patch("add_new_species.add_content_files.process_taxonomy", return_value="78910")
def test_add_index_md(mock_process_taxonomy, mock_get_gbif_taxon_key, user_form_data, temp_output_dir):
    """
    Test that the add_index_md function correctly processes the template _index.md file
    and replaces placeholders with species-specific information.
    """

    add_index_md(
        user_form_data=user_form_data,
        content_dir_path=temp_output_dir,
        data_dir_path=temp_output_dir,
    )

    output_file_path = temp_output_dir / "_index.md"
    assert output_file_path.exists()

    updated_index_md = output_file_path.read_text()

    assert "${species_name}" not in updated_index_md
    assert "${species_slug}" not in updated_index_md
    assert "${common_name}" not in updated_index_md
    assert "${description}" not in updated_index_md
    assert "${references}" not in updated_index_md
    assert "${publication}" not in updated_index_md
    assert "${img_attrib_text}" not in updated_index_md
    assert "${img_attrib_link}" not in updated_index_md
    assert "${todays_date}" not in updated_index_md
    assert "${gbif_taxon_id}" not in updated_index_md
    assert "${goat_webpage}" not in updated_index_md

    assert user_form_data.species_name in updated_index_md
    assert user_form_data.species_slug in updated_index_md
    assert user_form_data.common_name in updated_index_md
    assert user_form_data.description in updated_index_md
    assert user_form_data.references in updated_index_md
    assert user_form_data.publication in updated_index_md
    assert user_form_data.img_attrib_text in updated_index_md
    assert user_form_data.img_attrib_link in updated_index_md
    assert "123456" in updated_index_md
    assert "78910" in updated_index_md

    mock_get_gbif_taxon_key.assert_called_once_with(species_name=user_form_data.species_name)
    mock_process_taxonomy.assert_called_once_with(user_form_data.species_name, temp_output_dir)


def test_add_assembly_md(user_form_data: UserFormData, assembly_metadata: AssemblyMetadata, temp_output_dir):
    """
    Test that the add_assembly_md function correctly processes the template assembly.md file
    and replaces placeholders with species-specific information.
    Note: the placeholder replacement assertion checks for the full ${} pattern since the words
    'funding' and 'publication' are not unique in the template file.
    """

    add_assembly_md(
        user_form_data=user_form_data,
        assembly_metadata=assembly_metadata,
        content_dir_path=temp_output_dir,
    )

    output_file_path = temp_output_dir / "assembly.md"
    assert output_file_path.exists()

    updated_assembly_md = output_file_path.read_text()

    assert "${species_name}" not in updated_assembly_md
    assert "${species_slug}" not in updated_assembly_md
    assert "${funding}" not in updated_assembly_md
    assert "${publication}" not in updated_assembly_md
    assert "${assembly_name}" not in updated_assembly_md
    assert "${assembly_type}" not in updated_assembly_md
    assert "${assembly_level}" not in updated_assembly_md
    assert "${genome_representation}" not in updated_assembly_md
    assert "${assembly_accession}" not in updated_assembly_md

    assert user_form_data.species_name in updated_assembly_md
    assert user_form_data.species_slug in updated_assembly_md
    assert user_form_data.funding in updated_assembly_md
    assert user_form_data.publication in updated_assembly_md
    assert assembly_metadata.assembly_name in updated_assembly_md
    assert assembly_metadata.assembly_type in updated_assembly_md
    assert assembly_metadata.assembly_level in updated_assembly_md
    assert assembly_metadata.genome_representation in updated_assembly_md
    assert assembly_metadata.assembly_accession in updated_assembly_md
